http://article.gmane.org/gmane.comp.version-control.git/234053
From: Andreas Krey <a.krey <at> gmx.de>
Subject: [PATCH 0/3] Unconfuse git clone when two branches at are HEAD.
Newsgroups: gmane.comp.version-control.git
Date: 2013-09-06 15:52:04 GMT (2 years, 25 weeks, 1 day, 19 hours and 37 minutes ago)

Ok, here are some patches that make git actually
check out the current remote branch when cloning.

Up to now this failed when there were two branches that pointed to 
the HEAD commit of the remote repo, and git clone would sometimes
choose the wrong one as the HEAD ref isn't transmitted in all
transport.

Stuff the HEAD ref into the capability list (assuming refs are clean 
enough to do that w/o escaping), and read them out on the other
side. All other things were thankfully already in place.

Two of the patches have Junio in the From as they are essentially his.

Andreas


http://article.gmane.org/gmane.comp.version-control.git/234055
From: Andreas Krey <a.krey <at> gmx.de>
Subject: [PATCH 1/3] upload-pack: send the HEAD information
Newsgroups: gmane.comp.version-control.git
Date: 2013-09-06 15:56:08 GMT (2 years, 25 weeks, 1 day, 19 hours and 32 minutes ago)

From: Junio C Hamano <gitster <at> pobox.com>

This implements the server side of protocol extension to show which branch
the HEAD points at.  The information is sent as a capability symref=<target>.

Signed-off-by: Junio C Hamano <gitster <at> pobox.com>
Signed-off-by: Andreas Krey <a.krey <at> gmx.de>
---
 upload-pack.c | 8 ++++++--
 1 file changed, 6 insertions(+), 2 deletions(-)

diff --git a/upload-pack.c b/upload-pack.c
index 127e59a..390d1ec 100644
--- a/upload-pack.c
+++ b/upload-pack.c
 <at>  <at>  -745,13 +745,17  <at>  <at>  static int send_ref(const char *refname, const unsigned char *sha1, int flag, vo
 	if (mark_our_ref(refname, sha1, flag, cb_data))
 		return 0;

-	if (capabilities)
-		packet_write(1, "%s %s%c%s%s%s agent=%s\n",
+	if (capabilities) {
+		unsigned char dummy[20];
+		const char *target = resolve_ref_unsafe("HEAD", dummy, 0, NULL);
+		packet_write(1, "%s %s%c%s%s%s%s%s agent=%s\n",
 			     sha1_to_hex(sha1), refname_nons,
 			     0, capabilities,
 			     allow_tip_sha1_in_want ? " allow-tip-sha1-in-want" : "",
 			     stateless_rpc ? " no-done" : "",
+			     target ? " symref=" : "", target ? target : 0,
 			     git_user_agent_sanitized());
+	}
 	else
 		packet_write(1, "%s %s\n", sha1_to_hex(sha1), refname_nons);
 	capabilities = NULL;
-- 
1.8.3.1.485.g9704416.dirty


http://article.gmane.org/gmane.comp.version-control.git/234054
From: Andreas Krey <a.krey <at> gmx.de>
Subject: [PATCH 2/3] connect.c: save symref info from server capabilities
Newsgroups: gmane.comp.version-control.git
Date: 2013-09-06 15:56:55 GMT (2 years, 25 weeks, 1 day, 19 hours and 30 minutes ago)

Signed-off-by: Andreas Krey <a.krey <at> gmx.de>
---
 connect.c | 11 +++++++++--
 1 file changed, 9 insertions(+), 2 deletions(-)

diff --git a/connect.c b/connect.c
index a0783d4..98c4868 100644
--- a/connect.c
+++ b/connect.c
 <at>  <at>  -72,8 +72,8  <at>  <at>  struct ref **get_remote_heads(int in, char *src_buf, size_t src_len,
 	for (;;) {
 		struct ref *ref;
 		unsigned char old_sha1[20];
-		char *name;
-		int len, name_len;
+		char *name, *symref;
+		int len, name_len, symref_len;
 		char *buffer = packet_buffer;

 		len = packet_read(in, &src_buf, &src_len,
 <at>  <at>  -94,9 +94,12  <at>  <at>  struct ref **get_remote_heads(int in, char *src_buf, size_t src_len,
 		name = buffer + 41;

 		name_len = strlen(name);
+		symref = 0;
 		if (len != name_len + 41) {
 			free(server_capabilities);
 			server_capabilities = xstrdup(name + name_len + 1);
+			symref = parse_feature_value(server_capabilities,
+						     "symref", &symref_len);
 		}

 		if (extra_have &&
 <at>  <at>  -108,6 +111,10  <at>  <at>  struct ref **get_remote_heads(int in, char *src_buf, size_t src_len,
 		if (!check_ref(name, name_len, flags))
 			continue;
 		ref = alloc_ref(buffer + 41);
+		if (symref) {
+			ref->symref = xcalloc(symref_len + 1, 1);
+			strncpy(ref->symref, symref, symref_len);
+		}
 		hashcpy(ref->old_sha1, old_sha1);
 		*list = ref;
 		list = &ref->next;
-- 
1.8.3.1.485.g9704416.dirty



http://article.gmane.org/gmane.comp.version-control.git/234056
From: Andreas Krey <a.krey <at> gmx.de>
Subject: [PATCH 3/3] clone: test the new HEAD detection logic
Newsgroups: gmane.comp.version-control.git
Date: 2013-09-06 15:57:53 GMT (2 years, 25 weeks, 1 day, 19 hours and 28 minutes ago)

From: Junio C Hamano <gitster <at> pobox.com>

Signed-off-by: Junio C Hamano <gitster <at> pobox.com>
Signed-off-by: Andreas Krey <a.krey <at> gmx.de>
---
 t/t5601-clone.sh | 11 +++++++++++
 1 file changed, 11 insertions(+)

diff --git a/t/t5601-clone.sh b/t/t5601-clone.sh
index 0629149..ccda6df 100755
--- a/t/t5601-clone.sh
+++ b/t/t5601-clone.sh
 <at>  <at>  -285,4 +285,15  <at>  <at>  test_expect_success NOT_MINGW,NOT_CYGWIN 'clone local path foo:bar' '
 	git clone "./foo:bar" foobar
 '

+test_expect_success 'clone from a repository with two identical branches' '
+
+	(
+		cd src &&
+		git checkout -b another master
+	) &&
+	git clone src target-11 &&
+	test "z$( cd target-11 && git symbolic-ref HEAD )" = zrefs/heads/another
+
+'
+
 test_done
-- 
1.8.3.1.485.g9704416.dirty
